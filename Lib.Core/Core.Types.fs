[<AutoOpen>]
module Lib.Core.Types
type dftLis<'a> = unit->'a list
type key = string
type ffn = string
type fnn = string // file name no extension
type ext = string
type fn = string
type msg = string
type msgs = msg list
type msgOpt = msg option
type lyMsgs = msgs[]
type msgOptAy = msgOpt[]
type oneEleAy<'a> = 'a[]
type oneEleLis<'a> = 'a list
type dupSeq<'a> = 'a seq
type wdt = int
type pos = int
type len = int
type sep = string
type s = string
type s1 = string
type s2 = string
type term = string
type termLvs = string
type lvs = string  // list of value separated by space
type t1 = term
type t2 = term
type fldNm = string
type likStr = string
type sub = string
type ix = int
type jx = int
type pfx = string
type nSpc = int
type isEr = bool
type lin = string
type pth = string
type pthSep = sep
type ft = string
type nm = string
type lines = string
type ly = lin[]
type dupFstTermLy = ly
type sy = string[]
type oy = obj[]
type olis = obj list
type slis = string list
type ss = string seq
type pred<'a> = 'a->bool
type macroStr = string
type er=macroStr*olis
type vbl = string // vbar line
type ny = string[] // name array
type cnt = int
type dic<'a> = Map<string,'a>
type bdic = dic<bool>
type sdic = dic<string>
type kstr = System.Collections.Generic.KeyValuePair<string,string>
type doc = {nm:string; nmSpc: string; sgn:string; doc:string; eg: (unit->string) list}
type fmTo = ix*ix
type ixCnt = ix*cnt
type LyMsgs(lyMsgs:msgs[]) =
    member x.lyMsgs = lyMsgs
    new() = LyMsgs([||])
